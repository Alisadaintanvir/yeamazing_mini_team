// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Role {
  ADMIN
  MANAGER
  MEMBER
}

model User {
  id          String   @id @default(uuid())
  email       String   @unique
  password    String
  name        String
  role        Role     @default(MEMBER)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  permissions String[] @default([])

  // Team relations
  teams TeamMembership[]

  // Message relations
  sentMessages     Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")

  @@index([role])
}

model Team {
  id          String   @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Member relations
  members TeamMembership[]

  // Project relations
  projects Project[]
}

model TeamMembership {
  id       String   @id @default(uuid())
  userId   String
  teamId   String
  joinedAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id])
  team Team @relation(fields: [teamId], references: [id])

  @@unique([userId, teamId])
  @@index([userId])
  @@index([teamId])
}

model Project {
  id          String    @id @default(uuid())
  name        String
  description String?
  status      String    @default("todo")
  priority    String    @default("medium")
  progress    Int       @default(0)
  dueDate     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Team relation
  teamId String?
  team   Team?   @relation(fields: [teamId], references: [id])

  @@index([teamId])
}

model Message {
  id          String   @id @default(cuid())
  content     String?
  attachments Json?
  senderId    String
  recipientId String
  createdAt   DateTime @default(now())
  sender      User     @relation("SentMessages", fields: [senderId], references: [id])
  recipient   User     @relation("ReceivedMessages", fields: [recipientId], references: [id])

  @@index([senderId])
  @@index([recipientId])
}
